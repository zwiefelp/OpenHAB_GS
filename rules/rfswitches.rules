import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import.org.joda.time.*
import java.util.concurrent.locks.ReentrantLock

var java.util.concurrent.locks.ReentrantLock lock  = new java.util.concurrent.locks.ReentrantLock()

rule "RFSWITCHES"
  when 
    Item rfswitches received update
  then	
    if (lock.tryLock()) {
	try {

	var String msg = ""
	var String item = ""
	
	msg = (rfswitches.state as StringType).toString
    	msg = transform("MAP","rfswitches.map",msg)
    
	if (msg != "" && msg.substring(0,7) != "UNKNOWN" ) {
        
        	var itm = msg.split("\:").get(0)
        	var cmd = msg.split("\:").get(1)
        
		if (itm != null && cmd != null) {
	        	logInfo("RFSWITCHES", "Received: " + itm + " - |" + cmd + "|")
	
			if ( cmd.substring(0,2) == "ON" ) {
			    logInfo("RFSWITCHES", "sendCommand(" + itm + ",ON)"
			    sendCommand(itm, "ON")
			}

			if (cmd == "OFF" ) {
			    logInfo("RFSWITCHES", "sendCommand(" + itm + ",OFF)"
			    sendCommand(itm, "OFF")
			}

			if (cmd == "TOGGLE" ) {
			    val i = gAll.members.filter(s | s.name == itm).map[it].head
			    if (i.state == OFF) {
				sendCommand(itm, "ON")
			    } else {
				sendCommand(itm, "OFF")
			    }
			}
		}
	}

	} catch(Exception e) {
	    logInfo("RFSWITCHES","Exception Caught: " + e.getMessage())

	} finally {			
	    lock.unlock()
	}
    } else {
	logInfo("RFSWITCHES","RFSWITCHES Event Locked! Exiting")
    }
	
  end
